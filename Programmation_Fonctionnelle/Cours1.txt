Paradigme Programmation fonctionnelle

* Les fonctions sont des "citoyens de première classe"
	- Une variable peut être une fonction
	- Une fonction peut prendre une fonction en argument
	- Une fonction peut retourner une fonction
	- Une fonction peut être une structure de donnée


Impératif --> Calcul une suite d'état (POO essaye de résoudre le problème) autre paradigme ?

Fonctionnel : calcul est découpé en VALEURS
Chaque valeur (expression) est composée de sous-expression

* Pureté

Avec le fonctionel, il n'y a pas d'effet de bord --> pureté
	-Plus facile à tester / parallèliser
	-Transparence déférentielle : On peut remplacer une expression par sa valeur


Plusieur langages, on utilisera un langage exclusivement fonctionel -> Haskell

Ecrire la somme des nombres allant de 1 à n :

somme n = sum [1..n]

En Haskell il n'y a pas de for /!\

La même chose :

somme2 n = sum (enumFromTo 1 n)

Autre exemples :

sommePairs n = sum [2,4..n]
sommePairs n = sum (enumFRomThenTO 2 4 n)

sommeCarres n = sum (map(^2)[1..n])

Syntaxe :

(x:xs) veut dire : une liste qui contient au moins un élément dont la tête est x et la queue est xs

Les fonctions sont prioritaires sur toute les autres opérations
Concaténation de lise :
[1,2,3] ++ [4,5]

Opération avant une liste possible : head, tail, drop x, take x, length, sum, product...

Haskell est fortement typé statiquement
-Les types sont un ensemble de valeur
-Typage fort : Tout est typé, pas de type de n'importe quoi (genre type object), pas de cast implicite
-Statiquement : à la compilation

"it" indique le type de la dernière valeur utilisée

Fonction et valeurs commence par une minuscule, contrairement aux types qui commence par une majuscule (False, True...)

maxBound : Donne la limite du type (maxBound :: Int), de même pour minBound
Integer -> maxBound n'est pas défini (puisqu'on peut donner n'importe quelle précision)

it :: [a]		a --> designe une variable de type

Provoque une erreur : [12.23] :: [Int]  ou bien  [False, 'a']

Guillemet double pour String. Il ne fait aucune difference entre String et [Char] --> "ab" est  égale ) ['a','b']

n-uplet (tuple) : Liste homogène, taille quelconque, par exemple ('a', False) donne it :: (Char, Bool)


Exemple de typage de fonction :
Ici on a une fonction qui prend en argument deux entiers et qui renvoie un entier
add :: (Int, Int) -> Int
add (n, m) = n + m
Autre exemples :

zeroTo :: Int -> [Int]
zeroTo n = [0..n]

duplique :: Int -> (Int, Int)		//Ici on précise quel type on veut utiliser pour la fonction --> polymorphisme
duplique x = (x, x)


Types polymorphe (Generics en java)

Ex1 :
Quelles fonctions ont les types suivants :
--[a] -> a
Ici elles ne peuvent qu'extraire une valeur de la liste:
ex1 :: [a] -> a
ex1 = head

--[a] -> [a]
ex2 = tail
ex3 = reverse

ex4 :: [a] -> [a]
ex4 = id

Fonctions curyfiées :

add' :: Int -> Int -> Int 		//Parentesage implicite : add' :: Int -> ( Int -> Int )
add' n m = n + m


Une class de type, par exemple Num, est un type ou un certain nombre de fonction sont défini
On peut donc créer des types de nombres, il en existe déjà comme Int, Integer, Word (mot processeur), Float, Double... qui
ont différente implémentation d'une fonction (exemple la fonction +) --> Surcharge

Pour définir une constante :

constante = 12

Exmple de fonction avec des if et else :
absolue :: (Num a, Ordr a) => a -> a
absolue n = if n <= 0 then -n else n
/!\ On est obligé de mettre un else sinon tout les cas ne sont pas couvert

Définition d'une fonction avec gardes :
signe n | n < 0		= -1
		| n == 0	= 0
		| otherwise = 1

On peut aussi faire comme ça :

signe' n | n < 0	= -1
		 | n == 0	= 0
signe' _			= 1

Définition avec filtrage de motifs :

non :: Bool -> Bool
non True = False
non False = True
--non _ = True

(&&&) :: Bool -> Bool -> Bool
True &&& True = True
True &&& False = False
False &&& True = False
False &&& False = False

On peut faire plus simple :

(&&&&) :: Bool -> Bool -> Bool
True &&&& True = True
_ &&&& _ = False

/!\ L'ordre est important, pour &&&&, ghci dira que la deuxième ligne est redondante si on inverse les deux lignes
(car tout les cas correspondent à : _ &&& _ = False)

undefined : Cela peut servir de bouche trou
Par exemple :
(&&&&&) :: Bool -> Bool -> Bool
b &&&&& True = b
_ &&&&& _ = False

undefined &&&&& True donnne undefined
undefined &&&&& False donnne False

On peut aussi se servir de error, qui a tout les types (error "Message")

: et [] sont les constructeurs de liste

extraitTete tout@(x:_) = (x, tout)
@ : décompose la variable tout
On dit que tout sera de forme tete : queue

--Retourne le 3e element d'une liste
toisieme :: [a] -> a


